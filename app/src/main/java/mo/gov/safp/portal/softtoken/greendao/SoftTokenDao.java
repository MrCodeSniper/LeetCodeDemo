package mo.gov.safp.portal.softtoken.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

import mo.gov.safp.portal.softtoken.SoftToken;
import mo.gov.safp.portal.softtoken.opt.AccountDb;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "SOFT_TOKEN".
*/
public class SoftTokenDao extends AbstractDao<SoftToken, Long> {

    public static final String TABLENAME = "SOFT_TOKEN";

    /**
     * Properties of entity SoftToken.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property LocalId = new Property(0, Long.class, "localId", true, "_id");
        public final static Property Username = new Property(1, String.class, "username", false, "USERNAME");
        public final static Property AccountType = new Property(2, String.class, "accountType", false, "ACCOUNT_TYPE");
        public final static Property Status = new Property(3, String.class, "status", false, "STATUS");
        public final static Property DisplayName = new Property(4, String.class, "displayName", false, "DISPLAY_NAME");
        public final static Property TokenId = new Property(5, String.class, "tokenId", false, "TOKEN_ID");
        public final static Property Index = new Property(6, String.class, "index", false, "INDEX");
    }

    private final SoftToken.AccountIndexConverter indexConverter = new SoftToken.AccountIndexConverter();

    public SoftTokenDao(DaoConfig config) {
        super(config);
    }
    
    public SoftTokenDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SOFT_TOKEN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: localId
                "\"USERNAME\" TEXT UNIQUE ," + // 1: username
                "\"ACCOUNT_TYPE\" TEXT," + // 2: accountType
                "\"STATUS\" TEXT," + // 3: status
                "\"DISPLAY_NAME\" TEXT," + // 4: displayName
                "\"TOKEN_ID\" TEXT," + // 5: tokenId
                "\"INDEX\" TEXT);"); // 6: index
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SOFT_TOKEN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SoftToken entity) {
        stmt.clearBindings();
 
        Long localId = entity.getLocalId();
        if (localId != null) {
            stmt.bindLong(1, localId);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String accountType = entity.getAccountType();
        if (accountType != null) {
            stmt.bindString(3, accountType);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(4, status);
        }
 
        String displayName = entity.getDisplayName();
        if (displayName != null) {
            stmt.bindString(5, displayName);
        }
 
        String tokenId = entity.getTokenId();
        if (tokenId != null) {
            stmt.bindString(6, tokenId);
        }
 
        AccountDb.AccountIndex index = entity.getIndex();
        if (index != null) {
            stmt.bindString(7, indexConverter.convertToDatabaseValue(index));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SoftToken entity) {
        stmt.clearBindings();
 
        Long localId = entity.getLocalId();
        if (localId != null) {
            stmt.bindLong(1, localId);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String accountType = entity.getAccountType();
        if (accountType != null) {
            stmt.bindString(3, accountType);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(4, status);
        }
 
        String displayName = entity.getDisplayName();
        if (displayName != null) {
            stmt.bindString(5, displayName);
        }
 
        String tokenId = entity.getTokenId();
        if (tokenId != null) {
            stmt.bindString(6, tokenId);
        }
 
        AccountDb.AccountIndex index = entity.getIndex();
        if (index != null) {
            stmt.bindString(7, indexConverter.convertToDatabaseValue(index));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SoftToken readEntity(Cursor cursor, int offset) {
        SoftToken entity = new SoftToken( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // localId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // username
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // accountType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // status
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // displayName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // tokenId
            cursor.isNull(offset + 6) ? null : indexConverter.convertToEntityProperty(cursor.getString(offset + 6)) // index
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SoftToken entity, int offset) {
        entity.setLocalId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUsername(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAccountType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStatus(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDisplayName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTokenId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIndex(cursor.isNull(offset + 6) ? null : indexConverter.convertToEntityProperty(cursor.getString(offset + 6)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SoftToken entity, long rowId) {
        entity.setLocalId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SoftToken entity) {
        if(entity != null) {
            return entity.getLocalId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SoftToken entity) {
        return entity.getLocalId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
